//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ng_gen {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "17.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Files {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Files() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("ng_gen.Files", typeof(Files).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///export const enum #PascalSingle#Action {
        ///  view
        ///}.
        /// </summary>
        internal static string Actions {
            get {
                return ResourceManager.GetString("Actions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { HttpClient } from &apos;@angular/common/http&apos;;
        ///import { Injectable } from &apos;@angular/core&apos;;
        ///import { Observable } from &apos;rxjs&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///import { HttpServiceBase } from &apos;www/shared&apos;;
        ///import { environment } from &apos;www/environments&apos;;
        ///
        ////* locally accessible feature module code, always use relative path */
        ///// import { #PascalSingle#Dto, #PascalSingle#ListItemDto, #PascalSingle#ViewDto } from &apos;./interfaces&apos;;
        ///
        ///@Injectable({        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ApiCode {
            get {
                return ResourceManager.GetString("ApiCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { TestBed } from &apos;@angular/core/testing&apos;;
        ///
        ///import { #PascalSingle#Api } from &apos;./#dash-single#.api&apos;;
        ///
        ///describe(&apos;#PascalSingle#Api&apos;, () =&gt; {
        ///  let api: #PascalSingle#Api;
        ///
        ///  beforeEach(() =&gt; {
        ///    TestBed.configureTestingModule({});
        ///    api = TestBed.inject(#PascalSingle#Api);
        ///  });
        ///
        ///  it(&apos;should be created&apos;, () =&gt; {
        ///    expect(api).toBeTruthy();
        ///  });
        ///});.
        /// </summary>
        internal static string ApiTest {
            get {
                return ResourceManager.GetString("ApiTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { ChangeDetectionStrategy, Component } from &apos;@angular/core&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///@Component({
        ///  selector: &apos;#prefix#-#dash-single#&apos;,
        ///  templateUrl: &apos;./#dash-single#.#dash-type#.html&apos;,
        ///  styleUrl: &apos;./#dash-single#.#dash-type#.scss&apos;,
        ///  changeDetection: ChangeDetectionStrategy.OnPush
        ///})
        ///export class #PascalSingle##PascalType# {
        ///
        ///}.
        /// </summary>
        internal static string ComponentCode {
            get {
                return ResourceManager.GetString("ComponentCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { #PascalSingle#Component } from &apos;./#dash-single#/#dash-single#.component&apos;;
        ///
        ///export const components = [
        ///  #PascalSingle#Component
        ///];
        ///
        ///export { #PascalSingle#Component } from &apos;./#dash-single#/#dash-single#.component&apos;;.
        /// </summary>
        internal static string ComponentIndex {
            get {
                return ResourceManager.GetString("ComponentIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { ComponentFixture, TestBed } from &apos;@angular/core/testing&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///import { #PascalSingle##PascalType# } from &apos;./#dash-single#.#dash-type#&apos;;
        ///
        ///describe(&apos;#PascalSingle##PascalType#&apos;, () =&gt; {
        ///  let #camelType#: #PascalSingle##PascalType#;
        ///  let fixture: #PascalType#Fixture&lt;#PascalSingle##PascalType#&gt;;
        ///
        ///  beforeEach(async () =&gt; {
        ///    await Tes [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ComponentTest {
            get {
                return ResourceManager.GetString("ComponentTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #
        ///# file.node[.node[.node]...]
        ///#
        ///&gt; _void_.#camelSingle#
        ///#
        ///# [folder/][node.[node.]...]keyword: text
        ///#
        ///title: ?
        ///description: ?.
        /// </summary>
        internal static string ComponentText {
            get {
                return ResourceManager.GetString("ComponentText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;#dash-single# component works!&lt;/p&gt;.
        /// </summary>
        internal static string ComponentView {
            get {
                return ResourceManager.GetString("ComponentView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { ChangeDetectionStrategy, Component, Inject } from &apos;@angular/core&apos;;
        ///import { MAT_DIALOG_DATA } from &apos;@angular/material/dialog&apos;;
        ///import { Observable } from &apos;rxjs&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///import { #PascalSingle#Data } from &apos;../../models&apos;;
        ///
        ///@Component({
        ///  templateUrl: &apos;./#dash-single#.dialog.html&apos;,
        ///  styleUrl: &apos;./#dash-single#.dialog.scss&apos;,
        ///  changeDetectio [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DialogCode {
            get {
                return ResourceManager.GetString("DialogCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///export interface #PascalSingle#Data {
        ///
        ///  name: string;
        ///}.
        /// </summary>
        internal static string DialogData {
            get {
                return ResourceManager.GetString("DialogData", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { #PascalSingle#Dialog } from &apos;./#dash-single#/#dash-single#.dialog&apos;;
        ///
        ///export const dialogs = [
        ///  #PascalSingle#Dialog
        ///];
        ///
        ///export { #PascalSingle#Dialog } from &apos;./#dash-single#/#dash-single#.dialog&apos;;.
        /// </summary>
        internal static string DialogIndex {
            get {
                return ResourceManager.GetString("DialogIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { ComponentFixture, TestBed } from &apos;@angular/core/testing&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///import { #PascalSingle#Dialog } from &apos;./#dash-single#.dialog&apos;;
        ///
        ///describe(&apos;#PascalSingle#Dialog&apos;, () =&gt; {
        ///  let component: #PascalSingle#Dialog;
        ///  let fixture: ComponentFixture&lt;#PascalSingle#Dialog&gt;;
        ///
        ///  beforeEach(async () =&gt; {
        ///    await TestBed.configureTestingModule({
        ///    [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string DialogTest {
            get {
                return ResourceManager.GetString("DialogTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #
        ///# file.node[.node[.node]...]
        ///#
        ///&gt; _void_.#camelSingle#
        ///#
        ///# [folder/][node.[node.]...]keyword: text
        ///#
        ///title: ?
        ///description: ?.
        /// </summary>
        internal static string DialogText {
            get {
                return ResourceManager.GetString("DialogText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;h2 mat-dialog-title&gt;Delete all elements?&lt;/h2&gt;
        ///&lt;mat-dialog-content&gt;
        ///  This will delete all elements that are currently on this page and cannot be undone.
        ///&lt;/mat-dialog-content&gt;
        ///&lt;mat-dialog-actions&gt;
        ///  &lt;button mat-button mat-dialog-close&gt;Cancel&lt;/button&gt;
        ///  &lt;button mat-button [mat-dialog-close]=&quot;true&quot;&gt;Delete&lt;/button&gt;
        ///&lt;/mat-dialog-actions&gt;.
        /// </summary>
        internal static string DialogView {
            get {
                return ResourceManager.GetString("DialogView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to export { #PascalSingle#Dto } from &apos;./#dash-single#.dto&apos;;
        ///export { #PascalSingle#ListItemDto } from &apos;./#dash-single#-list-item.dto&apos;;
        ///export { #PascalSingle#ViewDto } from &apos;./#dash-single#-view.dto&apos;;.
        /// </summary>
        internal static string InterfacesIndex {
            get {
                return ResourceManager.GetString("InterfacesIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { required, maxLength, prop } from &apos;@rxweb/reactive-form-validators&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///const msgRoot = &apos;#camelPlural#.#camelSingle#.&apos;;
        ///
        ///export class #PascalSingle# {
        ///
        ///  public modelId?: string;
        ///
        ///  @required( { message: msgRoot + &apos;name.required&apos; } )
        ///  @maxLength( { value: 100, message: msgRoot + &apos;name.maxLength&apos; } )
        ///  public name: string;
        ///
        ///  pub [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Model {
            get {
                return ResourceManager.GetString("Model", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///export interface #PascalSingle#Dto {
        ///
        ///    name: string;
        ///}
        ///
        ///export namespace #PascalSingle#Dto {
        ///
        ///  export function create(): #PascalSingle#Dto {
        ///    return {
        ///      name: &apos;&apos;
        ///    };
        ///  }
        ///}.
        /// </summary>
        internal static string ModelDto {
            get {
                return ResourceManager.GetString("ModelDto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to export * from &apos;./actions&apos;;
        ///export { DialogData } from &apos;./dialog.data&apos;;
        ///export { #PascalSingle# } from &apos;./#dash-single#.model&apos;;.
        /// </summary>
        internal static string ModelIndex {
            get {
                return ResourceManager.GetString("ModelIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///export interface #PascalSingle#ListItemDto {
        ///
        ///    name: string;
        ///}
        ///
        ///export namespace #PascalSingle#ListItemDto {
        ///
        ///  export function create(): #PascalSingle#ListItemDto {
        ///    return {
        ///      name: &apos;&apos;
        ///    };
        ///  }
        ///}.
        /// </summary>
        internal static string ModelListItemDto {
            get {
                return ResourceManager.GetString("ModelListItemDto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///export interface #PascalSingle#ViewDto {
        ///
        ///    name: string;
        ///}
        ///
        ///export namespace #PascalSingle#ViewDto {
        ///
        ///  export function create(): #PascalSingle#ViewDto {
        ///    return {
        ///      name: &apos;&apos;
        ///    };
        ///  }
        ///}.
        /// </summary>
        internal static string ModelViewDto {
            get {
                return ResourceManager.GetString("ModelViewDto", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { NgModule } from &apos;@angular/core&apos;;
        ///import { RouterModule } from &apos;@angular/router&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///import { SharedModule } from &apos;www/shared&apos;;
        ///
        ////* locally accessible feature module code, always use relative path */
        ///import { routes } from &apos;./#dash-plural#.routes&apos;;
        ///import { components } from &apos;./components&apos;;
        ///import { dialogs } from &apos;./dialogs&apos;;
        ///import { pages } from &apos;./pages&apos;;
        ///
        ///@NgModule( {
        ///  imports: [
        ///    SharedModule, [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Module {
            get {
                return ResourceManager.GetString("Module", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { Injectable } from &apos;@angular/core&apos;;
        ///import { Router } from &apos;@angular/router&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///@Injectable( {
        ///  providedIn: &apos;root&apos;
        ///} )
        ///export class #PascalSingle#Navigator {
        ///
        ///  #root = &apos;/#dash-single#&apos;;
        ///
        ///  constructor(
        ///    protected readonly router: Router
        ///  ) { }
        ///
        ///  // list(): void {
        ///  //   this.router.navigate( [ this.#root ] );
        ///  // }
        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string NavigatorCode {
            get {
                return ResourceManager.GetString("NavigatorCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { TestBed } from &apos;@angular/core/testing&apos;;
        ///
        ///import { #PascalSingle#Navigator } from &apos;./#dash-single#.navigator&apos;;
        ///
        ///describe(&apos;#PascalSingle#Navigator&apos;, () =&gt; {
        ///  let #camelSingle#: #PascalSingle#Navigator;
        ///
        ///  beforeEach(() =&gt; {
        ///    TestBed.configureTestingModule({});
        ///    #camelSingle# = TestBed.inject(#PascalSingle#Navigator);
        ///  });
        ///
        ///  it(&apos;should be created&apos;, () =&gt; {
        ///    expect(#camelSingle#).toBeTruthy();
        ///  });
        ///});.
        /// </summary>
        internal static string NavigatorTest {
            get {
                return ResourceManager.GetString("NavigatorTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { ChangeDetectionStrategy, Component } from &apos;@angular/core&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///@Component({
        ///  templateUrl: &apos;./#dash-single#.page.html&apos;,
        ///  styleUrl: &apos;./#dash-single#.page.scss&apos;,
        ///  changeDetection: ChangeDetectionStrategy.OnPush
        ///})
        ///export class #PascalSingle#Page {
        ///
        ///}.
        /// </summary>
        internal static string PageCode {
            get {
                return ResourceManager.GetString("PageCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to import { #PascalSingle#Page } from &apos;./#dash-single#/#dash-single#.page&apos;;
        ///
        ///export const pages = [
        ///  #PascalSingle#Page
        ///];
        ///
        ///export { #PascalSingle#Page } from &apos;./#dash-single#/#dash-single#.page&apos;;.
        /// </summary>
        internal static string PageIndex {
            get {
                return ResourceManager.GetString("PageIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { ComponentFixture, TestBed } from &apos;@angular/core/testing&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///import { #PascalSingle#Page } from &apos;./#dash-single#.page&apos;;
        ///
        ///describe(&apos;#PascalSingle#Page&apos;, () =&gt; {
        ///  let component: #PascalSingle#Page;
        ///  let fixture: ComponentFixture&lt;#PascalSingle#Page&gt;;
        ///
        ///  beforeEach(async () =&gt; {
        ///    await TestBed.configureTestingModule({
        ///      declara [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string PageTest {
            get {
                return ResourceManager.GetString("PageTest", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to #
        ///# file.node[.node[.node]...]
        ///#
        ///&gt; _void_.#camelSingle#
        ///#
        ///# [folder/][node.[node.]...]keyword: text
        ///#
        ///title: ?
        ///description: ?.
        /// </summary>
        internal static string PageText {
            get {
                return ResourceManager.GetString("PageText", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;p&gt;#dash-single# page works!&lt;/p&gt;.
        /// </summary>
        internal static string PageView {
            get {
                return ResourceManager.GetString("PageView", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { NgModule } from &apos;@angular/core&apos;;
        ///import { Routes, RouterModule } from &apos;@angular/router&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///import * as pages from &apos;./pages&apos;;
        ///
        ///export const routes: Routes = [
        ///  // {
        ///  //   path: &apos;&apos;,
        ///  //   component: pages.ListPage
        ///  // }, {
        ///  //   path: &apos;:key&apos;,
        ///  //   component: pages.ViewPage
        ///  // }, {
        ///  //   path: &apos;:key/edit&apos;,
        ///  //   compone [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Routes {
            get {
                return ResourceManager.GetString("Routes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { Injectable } from &apos;@angular/core&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///
        ///@Injectable({
        ///  providedIn: &apos;root&apos;
        ///})
        ///export class #PascalSingle##PascalType# {
        ///
        ///  constructor() { }
        ///}.
        /// </summary>
        internal static string ServiceCode {
            get {
                return ResourceManager.GetString("ServiceCode", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to export * from &apos;./interfaces&apos;;
        ///export { #PascalSingle#Api } from &apos;./#dash-single#.api&apos;;
        ///export { #PascalSingle#Navigator } from &apos;./#dash-single#.navigator&apos;;.
        /// </summary>
        internal static string ServiceIndex {
            get {
                return ResourceManager.GetString("ServiceIndex", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /* 3rd party libraries */
        ///import { TestBed } from &apos;@angular/core/testing&apos;;
        ///
        ////* globally accessible app code in every feature module */
        ///
        ////* locally accessible feature module code, always use relative path */
        ///import { #PascalSingle##PascalType# } from &apos;./#dash-single#.#dash-type#&apos;;
        ///
        ///describe(&apos;#PascalSingle##PascalType#&apos;, () =&gt; {
        ///  let #camelType#: #PascalSingle##PascalType#;
        ///
        ///  beforeEach(() =&gt; {
        ///    TestBed.configureTestingModule({});
        ///    #camelType# = TestBed.inject(#PascalSingle##PascalType#); [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ServiceTest {
            get {
                return ResourceManager.GetString("ServiceTest", resourceCulture);
            }
        }
    }
}
